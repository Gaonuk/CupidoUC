<%
  # We require net/http to request and json to parse
  require 'net/http'
  require 'json'
  # Checks for user selection of song
  if @destino.song
    q = @destino.song
    url = "https://api.spotify.com/v1/search?q=" + q + "&type=artist"
    # Checks for Admins designation of token
    token = @spotify.token
    uri = URI(url)
    # Generates new Net:HTTP GET Request to desired URI
    request = Net::HTTP::Get.new(uri.path)
    # Accept & Conten-Type are Spotify requested headers
    request["Accept"] = "application/json"
    request["Content-Type"] = "application/json"
    # Creates new request for correct port
    http = Net::HTTP.new(uri.host, uri.port)
    # Asks for SSL Encryption
    http.use_ssl = true
    # Requests again
    request = Net::HTTP::Get.new(uri.request_uri)
    # Adds header with specific token
    request['Authorization'] = "Bearer " + token
    # Executes request
    response = http.request(request)
    # Parses response to JSON
    call = JSON[response.body.force_encoding('utf-8')]
    # Checks if there is a correct answer
    if call['artists']
        # Gets artist's link for first result
        artist = call['artists']['items'][0]['external_urls']['spotify']
        # Parses to get embed link
        parsed = artist.to_s.split('artist')
        parsed[0] = parsed[0] + 'embed/'
        # Final embed link
        embed = parsed.join('artist') 
    # Else should execute if @Spotify.token is expired
    else
        embed='https://open.spotify.com/embed/artist/4q3ewBCX7sLwd24euuV69X'
    end

  # If user has not selected an artist, shows award-winning, 
  # grammy-nominated superstar 'Bad-Bunny'
  else
    embed='https://open.spotify.com/embed/artist/4q3ewBCX7sLwd24euuV69X'
  end
%>
<section class="hero is-fullheight is-danger">
  <div class="hero-body">
    <div class="columns is-centered">
      <div class="column is-4-widescreen is-5-desktop">

        <div class="card">
          <div class="card-content">


            <div class="media">
              <div class="media-left">


                <% if @destino.avatar.attached? %>
                  <figure class="image is-128x128">
                    <%= image_tag @destino.avatar, class: '' %>
                  </figure>
                <% else %>
                  <figure class="image">
                    <img class="" src="https://bulma.io/images/placeholders/256x256.png" alt=""/>
                  </figure>
                <% end %>
              </div>
              <div class="media-content">

                <h3 class="title" style="color: hsl(0, 0%, 21%); margin-top: 4vh;"> <%= @destino.nombre %></h3>
                <p class="heading">
                  <strong>Edad</strong>
                </p>
                <p class="content">Mi edad es <%= @destino.edad_numeros %> años.</p>
                <p class="heading">
                  <strong>Comuna</strong>
                </p>
                <p class="content">Vivo en la comuna <%= @destino.comuna_id %>.</p>
              </div>
            </div>
            <div class="content">

              <p class="heading"><strong>Descripcion</strong></p>
              <p><%= @destino.descripcion %> Lorem Ipsum is simply dummy text of the printing and typesetting industry.
                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer
                took a galley of type and scrambled it to make a type specimen book.</p>

              <br>
              <iframe src="<%= embed.to_s %>" width="300" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>

              <%= form_with(model: @Interaction, method: :post, html: {class: "has-text-centered"}) do |form| %>
                <div class="field">
                  <%= check_box_tag(:like) %>
                  <%= label_tag(:like, "❤️") %>
                </div>

                <div class="actions">
                  <%= form.submit 'Confirmar', class: "button is-warning" %>
                  <%= link_to 'Back', interactions_find_path, class: "button is-secondary" %>
                </div>


                <div class="is-invisible">
                  <%= form.label :user %> <br/>
                  <%= form.number_field :user_id, autofocus: true, autocomplete: "user_id", value: current_user.id %>
                </div>

                <div class="is-invisible">
                  <%= form.number_field :user_id_destiny, autofocus: true, autocomplete: "user_id_destiny", value: @destino.id %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- El siguiente codigo realiza la llamada a las interaciones y crea un Match si existe Like de ambos lados -->
  <% @likesme = ActiveRecord::Base.connection %>
  <% result = @likesme.exec_query('SELECT * FROM Interactions WHERE user_id =' + @destino.id.to_s + ';') %>
  <% result.each do |row| %>
    <%
      if row['user_id_destiny'] == current_user.id and row['like']
        @likesmeback = ActiveRecord::Base.connection
        resultback = @likesmeback.exec_query('SELECT * FROM Interactions WHERE user_id =' + current_user.id.to_s + ';')
        resultback.each do |row2|
          if row2['user_id_destiny'] == @destino.id and row2['like']
            Match.where(user_id1: @destino.id, user_id2: current_user.id).first_or_initialize.save
          end
        end
      end
    %>
  <% end %>
</section>
